---
- name: Tag, push Docker image to Harbor, update DB and Kubernetes manifests
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    harbor_url:       "harbor.app.kubeflow.masternode:30002"
    project:          "{{ project }}"
    service_name:     "{{ service_name }}"
    target_image:     "{{ target_image }}"
    service_tag:      "{{ service_tag }}"
    requested_tag:    "{{ new_tag | default('') }}"
    docker_env:
      DOCKER_HOST:       tcp://192.168.49.2:2376
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH:  "/home/admin/.minikube/certs"

    main_dir:              "/home/admin/{{ project }}/{{ service_name }}"
    backup_dir:            "/home/admin/{{ project }}/backup/{{ service_name }}"
    backup_manifest_dir:   "{{ backup_dir }}/{{ service_tag }}"
    live_manifest:         "/path/to/live/deployment.yaml"  # <-- upewnij się, że istnieje

  tasks:
    - name: Change manifest permission
      become: yes
      ansible.builtin.file:
        path: "{{ item }}"
        owner: admin
        group: admin
        mode: '0644'
        state: file
      loop:
        - "{{ live_manifest }}"
        - "{{ backup_manifest_dir }}/deployment.yaml"
      ignore_errors: yes

    - name: Get repository info (artifacts) from Harbor
      uri:
        url: "http://{{ harbor_url }}/api/v2.0/projects/{{ project }}/repositories/{{ service_name }}/artifacts?page=1&page_size=100&with_tag=true"
        method: GET
        user: admin
        password: "Olsen!eu4!cod"
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      register: harbor_repo_info
      changed_when: false
      ignore_errors: yes

    - name: Calculate next version from artifact count (safe)
      set_fact:
        next_version: "{{ (harbor_repo_info.json | default([]) | length) + 1 }}"

    - name: Decide approved_tag (override or v<next>)
      set_fact:
        approved_tag: "{{ requested_tag if requested_tag != '' else 'v' ~ next_version }}"

    - name: Build remote_image variable
      set_fact:
        remote_image: "{{ harbor_url }}/{{ project }}/{{ service_name }}:{{ approved_tag }}"

    - name: Tag image for Harbor (do not fail whole playbook if this fails)
      command: docker tag "{{ target_image }}" "{{ remote_image }}"
      environment: "{{ docker_env }}"
      register: tag_cmd
      failed_when: false
      changed_when: tag_cmd.rc == 0

    - name: Debug tag result
      debug:
        msg: "docker tag rc={{ tag_cmd.rc }} stdout={{ tag_cmd.stdout | default('') }} stderr={{ tag_cmd.stderr | default('') }}"

    - name: Push image to Harbor (do not fail whole playbook if this fails)
      command: docker push "{{ remote_image }}"
      environment: "{{ docker_env }}"
      register: push_cmd
      failed_when: false
      changed_when: push_cmd.rc == 0

    - name: Debug push result
      debug:
        msg: "docker push rc={{ push_cmd.rc }} stdout={{ push_cmd.stdout | default('') }} stderr={{ push_cmd.stderr | default('') }}"

    - name: Check if backup folder exists
      become: yes
      ansible.builtin.stat:
        path: "{{ backup_dir }}/{{ service_tag }}"
      register: backup_dir_stat
      ignore_errors: yes

    - name: Check if main_dir exists
      become: yes
      ansible.builtin.stat:
        path: "{{ main_dir }}"
      register: main_dir_stat
      ignore_errors: yes

    - name: Copy main_dir to backup folder with approved_tag
      become: yes
      ansible.builtin.command:
        cmd: cp -r "{{ main_dir }}" "{{ backup_dir }}/{{ approved_tag }}"
      when: main_dir_stat.stat.exists | default(false)
      ignore_errors: yes

    - name: Rename backup folder from service_tag to approved_tag
      become: yes
      ansible.builtin.command:
        cmd: mv "{{ backup_dir }}/{{ service_tag }}" "{{ backup_dir }}/{{ approved_tag }}"
      when:
        - "'latest' not in service_tag"
        - backup_dir_stat.stat.exists | default(false)
      ignore_errors: yes

    - name: Update backup manifest with new image
      become: yes
      ansible.builtin.replace:
        path: "{{ backup_dir }}/{{ approved_tag }}/k8s/deployment.yaml"
        regexp: '(^\s*image:\s*).+'
        replace: '\1{{ remote_image }}'
        backup: yes
      ignore_errors: yes

    - name: Remove local Docker image
      become: yes
      command: docker rmi "{{ target_image }}"
      environment: "{{ docker_env }}"
      ignore_errors: yes

    # --- Ensure output file dir exists and then write tag ---
    - name: Compute final output file (defaults to /tmp/approved_tag.txt)
      set_fact:
        final_output: "{{ output_file | default('/tmp/approved_tag.txt') }}"

    - name: Compute output dir (strip filename)
      set_fact:
        output_dir: "{{ final_output | regex_replace('/[^/]+$','') }}"

    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'

    - name: Save approved_tag to file (always try to write)
      ansible.builtin.copy:
        dest: "{{ final_output }}"
        content: "{{ approved_tag }}"
        mode: '0644'
      ignore_errors: yes

    - name: Debug approved_tag
      debug:
        msg:
          - "approved_tag={{ approved_tag }}"
          - "final_output={{ final_output }}"
          - "tag_cmd_rc={{ tag_cmd.rc | default('NA') }}"
          - "push_cmd_rc={{ push_cmd.rc | default('NA') }}"

