- name: Tag and push Docker image to Harbor
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    harbor_url: "{{ harbor_url }}"
    project: "{{ project }}"
    service_name: "{{ service_name }}"
    target_image: "{{ target_image }}"
    service_tag:  "{{ service_tag }}"
    # Jeśli nie podasz, to będzie użyty new_tag z Harbora po obliczeniu
    new_tag: ""

  tasks:
    - name: Get artifact count from Harbor
      uri:
        url: "http://{{ harbor_url }}/api/v2.0/repositories?q=name={{ project }}/{{ service_name }}"
        method: GET
        user: "admin"
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      register: harbor_repo_info
      changed_when: false

    - name: Calculate next version from artifact_count
      set_fact:
        next_version: "{{ (harbor_repo_info.json[0].artifact_count | default(0) | int) + 1 }}"

    - name: Set new tag if not already provided
      set_fact:
        new_tag: "{{ new_tag if new_tag else 'v' + next_version|string }}"

    - name: Set remote image using new_tag
      set_fact:
        remote_image: "{{ harbor_url }}/{{ project }}/{{ service_name }}:{{ new_tag }}"

    - name: Debug tagging info
      debug:
        msg: "Tagging image '{{ target_image }}' as '{{ remote_image }}' (new_tag={{ new_tag }})"

    - name: Tag image for Harbor
      command: docker tag "{{ target_image }}" "{{ remote_image }}"

    - name: Push image to Harbor
      command: docker push "{{ remote_image }}"
      environment:
        DOCKER_CONFIG: "/home/admin/.docker"

    - name: Update deploy_status to approved in service_details
      community.postgresql.postgresql_query:
        db: "{{ DB_NAME }}"
        login_host: "{{ DB_HOST }}"
        login_port: "{{ DB_PORT | int }}"
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
        query: |
          UPDATE service_details
          SET deploy_status = 'approved',
              image_tag = '{{ new_tag }}'
          WHERE image_name = '{{ service_name }}'  -- lub inna kolumna na repo
            AND deploy_status != 'approved'
            AND image_tag = '{{ service_tag }}'
